import { IColurs } from 'colurs';
import { TablurPadding, ITablurOptions, ITablurBorder, ITablurTokens, ITablurColumn, TablurAlign, TablurBorder, ITablurColumnGlobal } from './interfaces';
export declare class Tablur {
    options: ITablurOptions;
    border: ITablurBorder;
    debug: boolean;
    tokens: ITablurTokens;
    rows: ITablurColumn[][];
    colurs: IColurs;
    constructor(options?: ITablurOptions | boolean, debug?: boolean);
    private init;
    private pad;
    private shiftLine;
    private stringLength;
    padLeft(str: string, width: number, char: string): string;
    padCenter(str: string, width: number, char: string): string;
    padRight(str: string, width: number, char: string): string;
    getBorders(width: number, border: TablurBorder | ITablurBorder): {
        top: string;
        bottom: string;
        horizontal: string;
    };
    getMaxRow(rows: ITablurColumn[] | ITablurColumn[][], widthOnly?: boolean): {
        width: number;
        adjustment: number;
        count: number;
        columns: any[];
    };
    normalize(column: ITablurColumn): ITablurColumn[];
    normalize(columns: string[] | ITablurColumn[], globals?: ITablurColumnGlobal): ITablurColumn[];
    normalize(text: string): ITablurColumn[];
    normalize(text: string, align: TablurAlign, padding?: TablurPadding): ITablurColumn[];
    normalize(text: string, width: number, align?: TablurAlign, padding?: TablurPadding): ITablurColumn[];
    columnize(cols: ITablurColumn[], maxWidth: number, maxColumns: number[]): {
        row: string;
        padRow: string;
    };
    row(column: ITablurColumn): Tablur;
    row(columns: string[] | ITablurColumn[], globals?: ITablurColumnGlobal): Tablur;
    row(text: string): Tablur;
    row(text: string, align: TablurAlign, padding?: TablurPadding): Tablur;
    row(text: string, width: number, align?: TablurAlign, padding?: TablurPadding): Tablur;
    section(column: ITablurColumn): Tablur;
    section(text: string): Tablur;
    section(text: string, padding: TablurPadding): Tablur;
    section(text: string, align: TablurAlign, padding?: TablurPadding): Tablur;
    repeat(text: string): Tablur;
    repeat(column: ITablurColumn): Tablur;
    repeat(text: string, padding: TablurPadding): Tablur;
    repeat(text: string, align: TablurAlign, padding?: TablurPadding): Tablur;
    break(): this;
    build(): string[];
    build(width: number): string[];
    build(row: ITablurColumn[], width?: number): string[];
    build(rows: ITablurColumn[][], width?: number): string[];
    toString(): string;
    render(wrap?: boolean): this;
    clear(): this;
    reset(options?: ITablurOptions | boolean, debug?: boolean): this;
}
